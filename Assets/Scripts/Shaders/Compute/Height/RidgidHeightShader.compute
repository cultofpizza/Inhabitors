#pragma kernel Ridgid

#include "../../../Third Party/FractalNoise.cginc"

StructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
uint numVertices;

float baseRoughness;
int numLayers;
float3 offset;
float roughness;
float persistence;
float strength;
float weightMultiplier;

[numthreads(512, 1, 1)]
void Ridgid(uint id : SV_DispatchThreadID)
{
    if (id >= numVertices)
    {
        return;
    }
	
    float3 pos = vertices[id];
    float noiseValue = 0;
    float frequency = baseRoughness;
    float amplitude = 1;
    float weight = 1;

    for (int i = 0; i < numLayers; i++)
    {
        float v = 1 - abs(snoise(pos * frequency + offset));
        v *= v;
        v *= weight;
        weight = clamp(v * weightMultiplier,0,1);

        //apply mask here
        
        noiseValue += v * amplitude;
        frequency *= roughness;
        amplitude *= persistence;
    }
    
    heights[id] = noiseValue * strength;
}
